#!/usr/bin/php
<?php
/**
 * fbtop
 *
 * This script will parse the filebeat registry file and display the current offset of each log file
 *
 * @author     Gary Turner <gary.turner@talk-straight.com>
 * @copyright  2024 Talk Straight Ltd
 * @license    MIT Licence
 * @version    1.0.1
 * @link       https://github.com/talkstraightuk/fbtop
 */

$short_options = "f:s:h::n::";
$long_options = ["filename:","sleep:","help::","noloop::"];
$options = getopt($short_options, $long_options);

if (isset($options["h"]) || isset($options["help"])) {
    echo "fbtop - A simple filebeat registry monitor\n\n";
    echo " -h --help\t\tDisplay this help message\n";
    echo " -s --sleep <seconds>\tThe number of seconds to sleep between updates\n";
    echo " -f --filename <path>\tThe filebeat registry file to monitor\n";
    echo " -n --noloop\t\tRun once and exit\n";

    exit(0);
}

if (isset($options["f"]) || isset($options["filename"])) {
    $registryFile = isset($options["f"]) ? $options["f"] : $options["filename"];
} else {
    $registryFile = '/var/lib/filebeat/registry/filebeat/log.json';
}

if(isset($options["s"]) || isset($options["sleep"])) {
    $sleep = isset($options["s"]) ? $options["s"] : $options["sleep"];
} else {
    $sleep = 1;
}

$noloop = false;
if(isset($options["n"]) || isset($options["noloop"])) {
    $noloop = true;
}

if (!file_exists($registryFile)) {
    echo 'Could not locate filebeat registry: ' . $registryFile . "\n";
    exit(1);
}

while (1) {
    cls();
    $logLines = file_get_contents($registryFile);
    $inodeMap = [];
    $inodeFilemap = [];

    foreach (explode("\n", $logLines) as $line) {
        $logJson = json_decode($line, true);
        if (isset($logJson['k'])) {
            $inode = $logJson['v']['FileStateOS']['inode'];
            $offset = $logJson['v']['offset'];

            if (!isset($inodeFilemap[$inode])) {
                $logPath = preg_replace('#/[^/]*$#', '', $logJson['v']['source']);
                $cmd = 'find '.$logPath.' -inum '.$inode;
                $filename = shell_exec($cmd);
                $inodeFilemap[$inode] = trim($filename);
            }

            $logJson['v']['source'] = $inodeFilemap[$inode];
            $logJson['filesize'] = filesize($logJson['v']['source']);
            if ($offset == $logJson['filesize']) {
                $logJson['percent'] = 100;
            } else {
                $logJson['percent'] = number_format(($offset / $logJson['filesize']) * 100, 2, '.', '');
            }

            if (!isset($inodeMap[$inode])) {
                $logJson['last_offset'] = $logJson['v']['offset'];
                $logJson['rate'] = 0;
                $inodeMap[$inode] = $logJson;
            } elseif ($logJson['v']['offset'] > $inodeMap[$inode]['v']['offset']) {
                $logJson['rate'] = number_format((($logJson['v']['offset'] - $inodeMap[$inode]['last_offset']) / 1000) / $sleep, 2, '.', '');
                $logJson['last_offset'] = $logJson['v']['offset'];
                $inodeMap[$inode] = $logJson;
            }
        }
    }

    printf("%-6s%-60s%-15s%-15s%-8s%-7s\n", 'Inode', 'Filename', 'Filesize', 'Offset', '%', 'Rate');

    foreach ($inodeMap as $entry) {
        printf(
            "%-6d%-60s%-15s%-15d%-8s%-7s\n",
            $entry['v']['FileStateOS']['inode'],
            $entry['v']['source'],
            $entry['filesize'],
            $entry['v']['offset'],
            $entry['percent'].'%',
            $entry['rate'] . 'kb/s'
        );
    }

    if ($noloop) {
        exit(0);
    }

    sleep($sleep);
}

function cls()
{
    print("\033[2J\033[;H");
}
